{"version":3,"sources":["im-watching-you/tests/acceptance/tasks/show-test.js","im-watching-you/tests/acceptance/tasks/show-test.jshint.js","im-watching-you/tests/app.jshint.js","im-watching-you/tests/application/adapter.jshint.js","im-watching-you/tests/application/serializer.jshint.js","im-watching-you/tests/components/input-text/component.jshint.js","im-watching-you/tests/components/list-btn/component.jshint.js","im-watching-you/tests/components/main-btn/component.jshint.js","im-watching-you/tests/components/tasks/show/chrono-btn/component.jshint.js","im-watching-you/tests/components/tasks/show/trash-btn/component.jshint.js","im-watching-you/tests/components/tasks/show-page/component.jshint.js","im-watching-you/tests/helpers/destroy-app.js","im-watching-you/tests/helpers/destroy-app.jshint.js","im-watching-you/tests/helpers/module-for-acceptance.js","im-watching-you/tests/helpers/module-for-acceptance.jshint.js","im-watching-you/tests/helpers/resolver.js","im-watching-you/tests/helpers/resolver.jshint.js","im-watching-you/tests/helpers/start-app.js","im-watching-you/tests/helpers/start-app.jshint.js","im-watching-you/tests/info/route.jshint.js","im-watching-you/tests/integration/components/input-text/component-test.js","im-watching-you/tests/integration/components/input-text/component-test.jshint.js","im-watching-you/tests/integration/components/list-btn/component-test.js","im-watching-you/tests/integration/components/list-btn/component-test.jshint.js","im-watching-you/tests/integration/components/main-btn/component-test.js","im-watching-you/tests/integration/components/main-btn/component-test.jshint.js","im-watching-you/tests/integration/components/tasks/show/chrono-btn/component-test.js","im-watching-you/tests/integration/components/tasks/show/chrono-btn/component-test.jshint.js","im-watching-you/tests/integration/components/tasks/show/trash-btn/component-test.js","im-watching-you/tests/integration/components/tasks/show/trash-btn/component-test.jshint.js","im-watching-you/tests/integration/components/tasks/show-page/component-test.js","im-watching-you/tests/integration/components/tasks/show-page/component-test.jshint.js","im-watching-you/tests/router.jshint.js","im-watching-you/tests/task/model.jshint.js","im-watching-you/tests/tasks/new/route.jshint.js","im-watching-you/tests/tasks/route.jshint.js","im-watching-you/tests/tasks/show/route.jshint.js","im-watching-you/tests/test-helper.js","im-watching-you/tests/test-helper.jshint.js","im-watching-you/tests/unit/application/adapter-test.js","im-watching-you/tests/unit/application/adapter-test.jshint.js","im-watching-you/tests/unit/application/serializer-test.js","im-watching-you/tests/unit/application/serializer-test.jshint.js","im-watching-you/tests/unit/info/route-test.js","im-watching-you/tests/unit/info/route-test.jshint.js","im-watching-you/tests/unit/task/model-test.js","im-watching-you/tests/unit/task/model-test.jshint.js","im-watching-you/tests/unit/tasks/new/route-test.js","im-watching-you/tests/unit/tasks/new/route-test.jshint.js","im-watching-you/tests/unit/tasks/route-test.js","im-watching-you/tests/unit/tasks/route-test.jshint.js","im-watching-you/tests/unit/tasks/show/route-test.js","im-watching-you/tests/unit/tasks/show/route-test.jshint.js","im-watching-you/tests/unit/utils/time-util-test.js","im-watching-you/tests/unit/utils/time-util-test.jshint.js","im-watching-you/tests/utils/time-util.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('im-watching-you/tests/acceptance/tasks/show-test', ['exports', 'qunit', 'im-watching-you/tests/helpers/module-for-acceptance'], function (exports, _qunit, _imWatchingYouTestsHelpersModuleForAcceptance) {\n\n   (0, _imWatchingYouTestsHelpersModuleForAcceptance['default'])('Acceptance | tasks/show');\n   (0, _qunit.test)('visiting /tasks/show', function (assert) {\n      // let model = this.subject();\n      assert.expect(1);\n\n      // beforeEach: function() {\n      // };\n\n      // var store = this.application.__container__.lookup('route:tasks').store;\n      // var record;\n      // var idTask = 1111;\n      // Ember.run(()=>{\n      //\n      //     record = store.createRecord('task',{title:'primo',time:0, id:idTask});\n      //     return record.save();\n      // });\n      //\n      // visit(`/tasks/${idTask}`);\n      // andThen(function() {\n      //     assert.ok(true);\n      // });\n\n      assert.ok(true);\n   });\n});\n\n// import Ember from 'ember';","define('im-watching-you/tests/acceptance/tasks/show-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/tasks');\n  QUnit.test('acceptance/tasks/show-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/tasks/show-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/application/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/adapter.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/adapter.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/application/serializer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/serializer.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/serializer.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/components/input-text/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/input-text');\n  QUnit.test('components/input-text/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/input-text/component.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/components/list-btn/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/list-btn');\n  QUnit.test('components/list-btn/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/list-btn/component.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/components/main-btn/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/main-btn');\n  QUnit.test('components/main-btn/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/main-btn/component.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/components/tasks/show/chrono-btn/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/tasks/show/chrono-btn');\n  QUnit.test('components/tasks/show/chrono-btn/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tasks/show/chrono-btn/component.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/components/tasks/show/trash-btn/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/tasks/show/trash-btn');\n  QUnit.test('components/tasks/show/trash-btn/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tasks/show/trash-btn/component.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/components/tasks/show-page/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/tasks/show-page');\n  QUnit.test('components/tasks/show-page/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tasks/show-page/component.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('im-watching-you/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'im-watching-you/tests/helpers/start-app', 'im-watching-you/tests/helpers/destroy-app'], function (exports, _qunit, _imWatchingYouTestsHelpersStartApp, _imWatchingYouTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _imWatchingYouTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _imWatchingYouTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('im-watching-you/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/helpers/resolver', ['exports', 'ember/resolver', 'im-watching-you/config/environment'], function (exports, _emberResolver, _imWatchingYouConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _imWatchingYouConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _imWatchingYouConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('im-watching-you/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/helpers/start-app', ['exports', 'ember', 'im-watching-you/app', 'im-watching-you/config/environment'], function (exports, _ember, _imWatchingYouApp, _imWatchingYouConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _imWatchingYouConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _imWatchingYouApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('im-watching-you/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/info/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - info');\n  QUnit.test('info/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'info/route.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/integration/components/input-text/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input-text', 'Integration | Component | input text', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'input-text', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('input').length, 1);\n  });\n});","define('im-watching-you/tests/integration/components/input-text/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/input-text');\n  QUnit.test('integration/components/input-text/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/input-text/component-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/integration/components/list-btn/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('list-btn', 'Integration | Component | list btn', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'list-btn', ['loc', [null, [1, 0], [1, 12]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('svg').length, 1);\n  });\n});","define('im-watching-you/tests/integration/components/list-btn/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/list-btn');\n  QUnit.test('integration/components/list-btn/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-btn/component-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/integration/components/main-btn/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('main-btn', 'Integration | Component | main btn', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'main-btn', ['loc', [null, [1, 0], [1, 12]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('svg').length, 1);\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'main-btn', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.text').text().trim(), 'template block text');\n  });\n});","define('im-watching-you/tests/integration/components/main-btn/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/main-btn');\n  QUnit.test('integration/components/main-btn/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/main-btn/component-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/integration/components/tasks/show/chrono-btn/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tasks/show/chrono-btn', 'Integration | Component | tasks/show/chrono btn', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tasks/show/chrono-btn', ['loc', [null, [1, 0], [1, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('svg').length, 1);\n\n    // Template block usage:\" + EOL +\n  });\n});","define('im-watching-you/tests/integration/components/tasks/show/chrono-btn/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/tasks/show/chrono-btn');\n  QUnit.test('integration/components/tasks/show/chrono-btn/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tasks/show/chrono-btn/component-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/integration/components/tasks/show/trash-btn/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tasks/show/trash-btn', 'Integration | Component | tasks/show/trash btn', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tasks/show/trash-btn', ['loc', [null, [1, 0], [1, 24]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('svg').length, 1);\n  });\n});","define('im-watching-you/tests/integration/components/tasks/show/trash-btn/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/tasks/show/trash-btn');\n  QUnit.test('integration/components/tasks/show/trash-btn/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tasks/show/trash-btn/component-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/integration/components/tasks/show-page/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n    (0, _emberQunit.moduleForComponent)('tasks/show-page', 'Integration | Component | tasks/show page', {\n        integration: true\n    });\n\n    (0, _emberQunit.test)('it renders', function (assert) {\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n        assert.expect(3);\n\n        var title = 'currentTitle';\n        var time = '11';\n        this.set('title', title);\n        this.set('time', time);\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'fragmentReason': {\n                        'name': 'missing-wrapper',\n                        'problems': ['wrong-type']\n                    },\n                    'revision': 'Ember@2.2.0',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 56\n                        }\n                    }\n                },\n                isEmpty: false,\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'tasks/show-page', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [1, 24], [1, 29]]]]], [], []], 'time', ['subexpr', '@mut', [['get', 'time', ['loc', [null, [1, 35], [1, 39]]]]], [], []], 'isRunning', true], ['loc', [null, [1, 0], [1, 56]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        var htmlText = this.$().text().trim();\n        assert.notEqual(htmlText, '');\n\n        assert.ok(htmlText.indexOf(title) !== -1);\n        assert.ok(htmlText.indexOf(time) !== -1);\n    });\n\n    (0, _emberQunit.test)('active class works', function (assert) {\n        assert.expect(2);\n        this.set('running', true);\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'fragmentReason': {\n                        'name': 'missing-wrapper',\n                        'problems': ['wrong-type']\n                    },\n                    'revision': 'Ember@2.2.0',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 37\n                        }\n                    }\n                },\n                isEmpty: false,\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'tasks/show-page', [], ['isRunning', ['subexpr', '@mut', [['get', 'running', ['loc', [null, [1, 28], [1, 35]]]]], [], []]], ['loc', [null, [1, 0], [1, 37]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.ok(this.$('div').hasClass('active'));\n        this.set('running', false);\n        assert.ok(!this.$('div').hasClass('active'));\n    });\n});","define('im-watching-you/tests/integration/components/tasks/show-page/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/tasks/show-page');\n  QUnit.test('integration/components/tasks/show-page/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tasks/show-page/component-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/task/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - task');\n  QUnit.test('task/model.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'task/model.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/tasks/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - tasks/new');\n  QUnit.test('tasks/new/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tasks/new/route.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/tasks/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - tasks');\n  QUnit.test('tasks/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tasks/route.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/tasks/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - tasks/show');\n  QUnit.test('tasks/show/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tasks/show/route.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/test-helper', ['exports', 'im-watching-you/tests/helpers/resolver', 'ember-qunit'], function (exports, _imWatchingYouTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_imWatchingYouTestsHelpersResolver['default']);\n});","define('im-watching-you/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/application/adapter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('im-watching-you/tests/unit/application/adapter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application');\n  QUnit.test('unit/application/adapter-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/adapter-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/application/serializer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('task', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('im-watching-you/tests/unit/application/serializer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application');\n  QUnit.test('unit/application/serializer-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/serializer-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/info/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:info', 'Unit | Route | info', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('im-watching-you/tests/unit/info/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/info');\n  QUnit.test('unit/info/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/info/route-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/task/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n    // import {getTime} from '../../../utils/time-util';\n\n    (0, _emberQunit.moduleForModel)('task', 'Unit | Model | task', {\n        // Specify the other units that are required for this test.\n        needs: []\n    });\n\n    (0, _emberQunit.test)('it exists', function (assert) {\n        var model = this.subject();\n        // let store = this.store();\n        assert.ok(!!model);\n    });\n\n    // test('chronoTime is working', function(assert) {\n    //     var time = 3723;\n    //     let model = this.subject({time:time});\n    //\n    //     var chronoTime = model.get('chronoTime');\n    //     assert.equal(chronoTime, getTime(time));\n    //\n    //     assert.ok(chronoTime.indexOf('01') !== -1 && chronoTime.indexOf('02') !== -1 && chronoTime.indexOf('03') !== -1);\n    //     // let store = this.store();\n    // });\n});","define('im-watching-you/tests/unit/task/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/task');\n  QUnit.test('unit/task/model-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/task/model-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/tasks/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:tasks/new', 'Unit | Route | tasks/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('im-watching-you/tests/unit/tasks/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/tasks/new');\n  QUnit.test('unit/tasks/new/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/tasks/new/route-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/tasks/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:tasks', 'Unit | Route | tasks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('im-watching-you/tests/unit/tasks/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/tasks');\n  QUnit.test('unit/tasks/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/tasks/route-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/tasks/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\t// import Ember from 'ember';\n\n\t(0, _emberQunit.moduleFor)('route:tasks/show', 'Unit | Route | tasks/show', {\n\t\t// Specify the other units that are required for this test.\n\t\tneeds: ['model:Task'],\n\t\tbeforeEach: function beforeEach() {}\n\t});\n\n\t(0, _emberQunit.test)('it exists', function (assert) {\n\t\tvar route = this.subject();\n\t\tassert.ok(route);\n\t});\n\t//\n\t// test('timer is working', function(assert) {\n\t// \tassert.expect(3);\n\t//\n\t// \tvar route = this.subject();\n\t// \tassert.equal(route.get('time'),0);\n\t//\n\t// \tvar store = route.store;\n\t// \tvar record;\n\t//\n\t// \tEmber.run(()=>{\n\t// \t\trecord = store.createRecord('task',{title:'testing route',id:666});\n\t// \t\trecord.set('time',1000);\n\t// \t\troute.set('currentModel',record);\n\t// \t\troute.afterModel(record,{});\n\t// \t\trecord.get('deleteRunningObs')();\n\t// \t});\n\t//\n\t//\n\t// \tassert.equal(route.get('time'),1000);\n\t//\n\t// \t// alert(this.subject().store);\n\t//\n\t// \tassert.ok(route);\n\t// });\n});","define('im-watching-you/tests/unit/tasks/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/tasks/show');\n  QUnit.test('unit/tasks/show/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/tasks/show/route-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/unit/utils/time-util-test', ['exports', 'im-watching-you/utils/time-util', 'qunit'], function (exports, _imWatchingYouUtilsTimeUtil, _qunit) {\n\n    (0, _qunit.module)('Unit | Utility | time util');\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n        var time = 3723000;\n        var chronoTime = (0, _imWatchingYouUtilsTimeUtil.getTime)(time);\n        assert.ok(chronoTime.indexOf('01') !== -1 && chronoTime.indexOf('02') !== -1 && chronoTime.indexOf('03') !== -1);\n    });\n});","define('im-watching-you/tests/unit/utils/time-util-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils');\n  QUnit.test('unit/utils/time-util-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/time-util-test.js should pass jshint.');\n  });\n});","define('im-watching-you/tests/utils/time-util.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - utils');\n  QUnit.test('utils/time-util.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/time-util.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('im-watching-you/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}